#!/usr/bin/env bash
# A one-shot bootstrapper for a modern ml/data science python project using
# miniforge/mamba/conda for the environment and uv for package management.
#
# usage:
#   bash bootstrap_uv_ml.sh <project-slug> [python-version] [env-name]
#
# example:
#   bash bootstrap_poetry_uv_ml.sh fraudlab 3.11 fraudlab
#
# strategy:
#   • conda manages the interpreter & system deps.
#   • uv manages python deps (installed into the conda env).

set -euo pipefail

# --- script arguments --------------------------------------------------------
project_slug=${1:-ml-project}
py_version=${2:-3.11}
env_name=${3:-$project_slug}

# --- derived variables -------------------------------------------------------
# derive a valid python package name from the project slug
package_name=${project_slug//-/_}

# kernel-safe env name (underscores only)
env_name_safe=${env_name//-/_}

# pick mamba if present, otherwise fall back to conda
if command -v mamba >/dev/null 2>&1; then
	conda_bin="mamba"
else
	conda_bin="conda"
fi

echo "==> scaffolding project: $project_slug (package: $package_name)"
mkdir -p "$project_slug" && cd "$project_slug"

# --- git ---------------------------------------------------------------------
if ! command -v git >/dev/null 2>&1; then
	echo "[warn] git not found; skipping git init"
else
	git init -q >/dev/null 2>&1
	git branch -m main >/dev/null 2>&1
fi

# --- directories -------------------------------------------------------------
mkdir -p src/"$package_name"/{data,features,models,utils,viz}
mkdir -p tests notebooks scripts configs docs
mkdir -p data/{raw,interim,processed,external}

# helper to escape replacement strings for sed
_esc() { printf '%s' "$1" | sed -e 's/[\/&]/\\&/g'; }

# --- .gitignore --------------------------------------------------------------
cat > .gitignore <<'GITIGNORE'
__pycache__/
*.py[cod]
*$py.class

.venv/
.conda/
.uv_cache/

build/
dist/
*.egg-info/
.eggs/

.ipynb_checkpoints/
.notebooks_cache/
.DS_Store

data/
!data/.gitkeep

*.log
.coverage
htmlcov/
.mypy_cache/
.ruff_cache/

.env
.env.local
.env.*.local
GITIGNORE

touch data/.gitkeep

# --- LICENSE (MIT) -----------------------------------------------------------
year=$(date +%Y)
cat > LICENSE <<LICENSE_TEXT
MIT License

Copyright (c) $year Your Name <you@example.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
LICENSE_TEXT

# --- readme.md ---------------------------------------------------------------
cat > readme.md <<'README'
# $project_slug

A modern ML/Data Science python project using **conda/mamba** for the environment and **uv** for python package management.

This scaffold wires together a small, reproducible developer experience:

- `environment.yml` (managed by conda/mamba) installs the Python interpreter and system-level packages (uv, jupyterlab, ipykernel, etc.).
- `pyproject.toml` declares your Python dependencies and project metadata.
- `requirements.lock.txt` is a lockfile generated by `uv` for reproducible installs.
- `Makefile` provides convenient developer shortcuts (create env, lock deps, install, run linters/tests, register kernels).

## What the bootstrap script does for you

If you ran the provided bootstrap script, it already performed these steps for you:

1. **Creates or updates the conda environment** named in `environment.yml`.
2. **Compiles `pyproject.toml`** into a `requirements.lock.txt` file.
3. **Installs all Python dependencies** from the lockfile into the conda env using `uv pip sync`.
4. **Installs your project's own package** in editable mode.
5. **Installs pre-commit hooks** inside the environment.
6. **Registers a Jupyter kernel** for the environment.
7. **Makes an initial git commit** with the scaffold files.

## Quickstart (after running the bootstrap script)

```bash
# 1) activate the environment for an interactive shell
conda activate $env_name

# 2) verify installation and run project CLI help
$package_name --help

# 3) run linters and tests (recommended)
make lint
make test
```

## Developer Workflow

- **To add a dependency**: Add the package name to `pyproject.toml` under `[project.dependencies]` (or `[project.optional-dependencies.dev]`), then run `make lock` to update the lockfile.
- **To install updated dependencies**: Run `make install`. This will sync your environment with the lockfile.

## Manual quickstart (if you did not run the bootstrapper)

```bash
# create conda env with core tools
$conda_bin env create -f environment.yml
conda activate $env_name

# compile lockfile and install dependencies
uv pip compile pyproject.toml --all-extras -o requirements.lock.txt
uv pip sync requirements.lock.txt
uv pip install -e .

# setup developer tools
uv run pre-commit install
python -m ipykernel install --user --name "$env_name_safe" --display-name "$project_slug (uv)"
```
README

# substitute shell variables in readme.md
sed -i "s/\$project_slug/$( _esc "$project_slug" )/g" readme.md
sed -i "s/\$package_name/$( _esc "$package_name" )/g" readme.md
sed -i "s/\$conda_bin/$( _esc "$conda_bin" )/g" readme.md
sed -i "s/\$env_name/$( _esc "$env_name" )/g" readme.md
sed -i "s/\$env_name_safe/$( _esc "$env_name_safe" )/g" readme.md

# --- environment.yml (conda: only python + non-python deps) ------------------
cat > environment.yml <<'ENVYAML'
name: $env_name
channels:
  - conda-forge
  - defaults
dependencies:
  - python=$py_version
  - pip
  - uv
  - jupyterlab
  - ipykernel
ENVYAML

# substitute variables in environment.yml
sed -i "s/\$env_name/$( _esc "$env_name" )/g" environment.yml
sed -i "s/\$py_version/$( _esc "$py_version" )/g" environment.yml

# --- pyproject.toml (uv) -------------------------------------------------
cat > pyproject.toml <<'TOML'
[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "$project_slug"
version = "0.1.0"
description = "modern ml/data science project scaffold (conda + uv)"
authors = [
  { name="<Your Name>", email="<you@example.com>" },
]
readme = "README.md"
requires-python = ">=$py_version"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: $py_version",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "numpy",
    "pandas",
    "scikit-learn",
    "scipy",
    "matplotlib",
    "rich",
    "python-dotenv",
    "pydantic",
    "typer",
    "hydra-core",
]

[project.optional-dependencies]
dev = [
    "ruff",
    "mypy",
    "pytest",
    "pytest-cov",
    "pre-commit",
]

[project.scripts]
$package_name = "$package_name.cli:app"
TOML

# substitute variables in pyproject.toml
sed -i "s/\$project_slug/$( _esc "$project_slug" )/g" pyproject.toml
sed -i "s/\$package_name/$( _esc "$package_name" )/g" pyproject.toml
sed -i "s/\$py_version/$( _esc "$py_version" )/g" pyproject.toml

# --- .pre-commit-config.yaml -------------------------------------------------
cat > .pre-commit-config.yaml <<'PRECOMMIT'
repos:
  - repo: local
    hooks:
      - id: ruff-lint
        name: ruff-lint
        entry: ruff
        language: system
        types: [python]
        args: ["check", "--fix"]
      - id: ruff-format
        name: ruff-format
        entry: ruff
        language: system
        types: [python]
        args: ["format"]
      - id: mypy
        name: mypy
        entry: mypy
        language: system
        types: [python]
      - id: pytest
        name: pytest
        entry: pytest
        language: system
        pass_filenames: false
        types: [python]
PRECOMMIT

# --- Makefile ----------------------------------------------------------------
cat > Makefile <<'MAKEFILE'
.PHONY: help env lock install lint format typecheck test cov precommit hooks kernel clean tree

help:
	@echo "targets: env lock install lint format typecheck test cov precommit hooks kernel clean tree"

env:
	@if command -v mamba >/dev/null 2>&1; then mamba env update -f environment.yml --prune; \
	else conda env update -f environment.yml --prune; fi

lock:
	uv pip compile pyproject.toml --all-extras -o requirements.lock.txt

install:
	uv pip sync requirements.lock.txt
	uv pip install -e .

lint:
	uv run ruff check .

format:
	uv run ruff format .

typecheck:
	uv run mypy src

test:
	uv run pytest -q

cov:
	uv run pytest --cov=src --cov-report=term-missing

precommit:
	uv run pre-commit run --all-files

hooks:
	uv run pre-commit install

kernel:
	python -m ipykernel install --user --name "$env_name_safe" --display-name "$project_slug (uv)"

clean:
	rm -rf .ruff_cache .mypy_cache .pytest_cache dist build htmlcov requirements.lock.txt

tree:
	@{ command -v tree >/dev/null 2>&1 && tree -a -I '.git|.ruff_cache|.mypy_cache|.pytest_cache|__pycache__'; } || \
	{ echo "(install 'tree' for nicer output)"; find . -maxdepth 2 -type d | sort; }
MAKEFILE

# substitute variables into Makefile
sed -i "s/\$project_slug/$( _esc "$project_slug" )/g" Makefile
sed -i "s/\$env_name_safe/$( _esc "$env_name_safe" )/g" Makefile


# --- minimal package code ----------------------------------------------------
cat > src/$package_name/__init__.py <<'INITPY'
__version__ = "0.1.0"
INITPY

cat > src/$package_name/cli.py <<'CLIPY'
import pathlib
import typer

app = typer.Typer(help="command-line interface for the project.")

@app.command()
def hello(name: str = "world") -> None:
    """Greets the user."""
    typer.echo(f"Hello, {name}!")

@app.command()
def train(
    data_dir: pathlib.Path = typer.Option(pathlib.Path("data/raw"), exists=True, file_okay=False),
    out_dir: pathlib.Path = typer.Option(pathlib.Path("data/processed"), file_okay=False),
) -> None:
    """A placeholder training command."""
    out_dir.mkdir(parents=True, exist_ok=True)
    typer.echo(f"Training with data in {data_dir} → outputs in {out_dir}")

if __name__ == "__main__":
    app()
CLIPY

# --- tests -------------------------------------------------------------------
cat > tests/test_smoke.py <<'TESTPY'
from $package_name import __version__

def test_version():
    assert __version__ == "0.1.0"
TESTPY

# substitute package name in tests
sed -i "s/\$package_name/$( _esc "$package_name" )/g" tests/test_smoke.py

# --- example notebook placeholder --------------------------------------------
cat > notebooks/readme.md <<'NBREADME'
Place notebooks here. Consider keeping them light and moving code into src/.
NBREADME

# --- .env.example ------------------------------------------------------------
cat > .env.example <<'DOTENV'
APP_ENV=dev
LOG_LEVEL=info
DOTENV

# --- finish up ---------------------------------------------------------------
echo "==> creating/updating conda env '$env_name' (python=$py_version) with $conda_bin"

if ! $conda_bin env list | awk '{print $1}' | grep -qx "$env_name"; then
    echo "==> creating new conda env: $env_name"
    $conda_bin env create -f environment.yml
else
    echo "==> updating existing conda env: $env_name"
    $conda_bin env update -f environment.yml --prune
fi

echo "==> compiling dependencies with uv"
$conda_bin run -n "$env_name" python -m uv pip compile pyproject.toml --all-extras -o requirements.lock.txt

echo "==> installing project dependencies with uv"
$conda_bin run -n "$env_name" python -m uv pip sync requirements.lock.txt
$conda_bin run -n "$env_name" python -m uv pip install -e .

echo "==> installing pre-commit hooks"
$conda_bin run -n "$env_name" python -m uv run pre-commit install

echo "==> registering jupyter kernel ($env_name_safe)"
$conda_bin run -n "$env_name" python -m ipykernel install --user --name "$env_name_safe" --display-name "$project_slug (uv)"

# initial commit
if command -v git >/dev/null 2>&1; then
    git add . >/dev/null 2>&1
    git commit -m "chore: initial scaffold (conda+uv ml project)" >/dev/null 2>&1
fi

echo
echo "✅ done!"
